# 라이브러리 호출 및 데이터 준비
import pandas as pd >>>  Pandas 라이브러리를 가져온다.
df = pd.read_csv('data/ch3/titanic/train.csv', index_col='PassengerId') >>>data/ch3/titanic/train.csv라는 파일에서 데이터를 가져와 DataFrame 객체인 df에 저장한다.
print(df.head()) >>> 'df' DataFrame의 상위 5개 행을 출력한다.

# 데이터 전처리
df = df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Survived']]
df['Sex'] = df['Sex'].map({'male': 0, 'female' : 1}) >>> Sex 열의 값을 'male'은 0으로, 'female'은 1로 변환
df = df.dropna() >>>값이 없는 데이터를 삭제
X = df.drop('Survived', axis=1) 
y = df['Survived'] 

# 훈련과 테스트 데이터셋으로 분리

from sklearn.model_selection import train_test_split >>>train_test_split 함수를 가져와 나눈다.
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1) >>>train_test_split 함수를 사용하여 입력 변수와 예측 레이블을 훈련 데이터와 테스트 데이터로 분할하는 부분입니다.

# 결정 트리 모델 생성

from sklearn import tree >>>from sklearn import tree는 Scikit-learn 라이브러리에서 tree 모듈을 가져오는 부분입니다.
model = tree.DecisionTreeClassifier() >>>클래스의 인스턴스인 model을 생성하는 부분입니다.

# 모델 훈련

model.fit(X_train, y_train) # 모델을 훈련 시킴

# 모델 예측
>>>결과를 예측하고 정확도를 평가
y_predict = model.predict(X_test)
from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_predict)

# 혼동 행렬을 이용한 성능 측정
>>>예측된 결과와 실제 레이블 간의 혼동 행렬을 생성하고, 이를 데이터프레임으로 변환하여 출력하는 과정을 보여줍니다.
from sklearn.metrics import confusion_matrix
pd.DataFrame(
    confusion_matrix(y_test, y_predict),
    columns=['Predicted Not Survival', 'Predicted Survival'],
    index=['True Not Survival', 'True Survival']
)
